import glob
import pickle
import numpy as np

processedNotes = []
for file in glob.glob("output/pickle/0*"):
    pieceNotes = pickle.load(open(file, "rb"))
    processedNotes.extend([sorted(notes) for notes in pieceNotes if len(notes) > 100])

minPitch = 1e9
maxPitch = -1
for part in processedNotes:
    for note in part:
        for pitch in note[2]:
            minPitch = min(pitch, minPitch)
            maxPitch = max(pitch, maxPitch)

durations = set()
offsets = set()
for idx1, part in enumerate(processedNotes):
    lastOffset = part[0][0]
    for idx2, note in enumerate(part):
        relativeOffset = note[0] - lastOffset
        lastOffset = note[0]
        oneHot = np.array(note[2]) - minPitch
        newPitches = np.zeros(int(maxPitch - minPitch + 1))
        newPitches[oneHot.astype(int)] = 1
        durations.add(note[1])
        offsets.add(relativeOffset)
        processedNotes[idx1][idx2] = np.append(newPitches, [relativeOffset, note[1]])

print("offsets", sorted(offsets))
print("durations", sorted(durations))

pickle.dump(processedNotes, open(f'output/pickle/music_lines.pkl', "wb"))

# offsets [0.0, 0.08333333333331439, 0.0833333333333286, 0.08333333333333215, 0.08333333333333304, 0.08333333333333393, 0.0833333333333357, 0.08333333333334281, 0.1666666666666572, 0.1666666666666643, 0.16666666666666607, 0.16666666666666696, 0.16666666666666785, 0.1666666666666714, 0.16666666666668561, 0.25, 0.3333333333333144, 0.3333333333333286, 0.33333333333333215, 0.33333333333333304, Fraction(1, 3), 0.33333333333333337, 0.3333333333333339, 0.3333333333333357, 0.3333333333333428, 0.4166666666666572, 0.4166666666666643, 0.4166666666666661, 0.4166666666666665, 0.41666666666666696, 0.41666666666666785, 0.4166666666666714, 0.4166666666666856, 0.5, 0.5833333333333144, 0.5833333333333286, 0.5833333333333321, 0.5833333333333339, 0.5833333333333357, 0.5833333333333428, 0.6666666666666572, 0.6666666666666643, 0.6666666666666661, 0.6666666666666666, Fraction(2, 3), 0.6666666666666679, 0.6666666666666714, 0.6666666666666856, 0.75, 0.8333333333333144, 0.8333333333333286, 0.833333333333333, 0.8333333333333335, 0.8333333333333339, 0.8333333333333357, 0.8333333333333428, 0.9166666666666572, 0.9166666666666643, 0.916666666666667, 0.9166666666666679, 0.9166666666666714, 0.9166666666666856, 1.0, 1.0833333333333144, 1.0833333333333286, 1.0833333333333357, 1.0833333333333428, 1.1666666666666572, 1.1666666666666643, 1.1666666666666714, 1.1666666666666856, 1.25, 1.3333333333333144, 1.3333333333333286, 1.3333333333333321, Fraction(4, 3), 1.3333333333333428, 1.4166666666666572, 1.4166666666666643, 1.4166666666666714, 1.4166666666666856, 1.5, 1.6666666666666572, 1.6666666666666643, 1.6666666666666679, 1.6666666666666714, 1.6666666666666856, 1.75, 1.9166666666666572, 1.9166666666666643, 1.9166666666666679, 1.9166666666666714, 1.9166666666666856, 2.0, 2.25, 2.3333333333333286, 2.3333333333333357, 2.333333333333343, 2.5, 2.666666666666657, 2.6666666666666856, 2.75, 3.0, 3.25, 3.5, 3.75, 4.0, 4.166666666666657, 4.25, 4.5, 5.0, 5.25, Fraction(16, 3), 5.416666666666686, 5.5, 6.0, 6.5, 7.0, 7.333333333333329, 7.333333333333332, 7.333333333333343, 7.5, 8.0, 9.0, 10.0, 10.5, 11.0, 12.0, 16.0, 16.5, 17.5, 20.0, 28.0, 28.5, 32.5, 33.0, 33.91666666666667, Fraction(35, 1), 35.5, 52.0, 54.66666666666666, 54.666666666666686, 65.5, 66.5]
# durations [0.0, 0.25, 0.3333333333333333, 0.5, 0.6666666666666666, 0.75, 1.0, 1.25, 1.3333333333333333, 1.5, 1.6666666666666667, 1.75, 2.0, 2.25, 2.3333333333333335, 2.5, 2.6666666666666665, 2.75, 3.0, 3.25, 3.3333333333333335, 3.5, 3.6666666666666665, 3.75, 4.0, 4.25, 5.0, 5.25, 5.333333333333333, 5.5, 5.666666666666667, 6.0, 6.25, 6.5, 6.75, 7.5, 7.75, 8.0, 8.25, 8.333333333333334, 12.0, 16.0]